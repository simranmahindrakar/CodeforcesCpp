#include <iostream>
#include <bits/stdc++.h>

using namespace std;
int main()
{
	int t;
	cin>>t;  //number of test cases
	while(t--)
	{
		int n;
		cin>>n;
		set<int> numset;   //using set from STL 
		for(int i=0; i<n; i++)
		{
			int x;
			cin>>x;
			numset.insert(x);   //numset will store only unique values. No duplicates
		}
		if(numset.size() >1)   //that means there are atleast 2 unique numbers in the given array.
    {
			cout<<"1"<<endl;      

		}
		else {
			cout<<n<<endl;
		}
	}
}

In this problem, you just need to make few observations and the answer will be right in front of you.
Let say you have an array A.
obv 1: if all the elements in A are the same, we cannot perform any operations and therefore, ans = length(A). 
Obv 2: if all elements in A are different, we can perform the necessary operations and bring down the ans to 1.
obv 3: (the tricky part) what if A= {2,2,2,3}. In this case, we can do this... A={2,2,5}.... {2,7}.... {9} and then ans = 1.
Therefore, as long as you have one different integer i.e. for any index i A[i] != A[i+1], the answer will be 1.

So here we declare a "set" of integers called numset. A set in cpp stores unique elements. No duplicates are inserted. (How? So in a set, elements are stored as key/value pairs.
Here the key=value (the value is also the key and is used to identify itself) and no two values can be mapped to the same key.

We cin the current number and insert it in the set.
Once that loop is completed, we check the size of the set.
if the size>1, that means there are atleast 2 adjacent integers that are not equal and hence the ans = 1
else all the elements are identical and we cannot perform any operations, and ans = length(A)

Learn about set:
https://www.geeksforgeeks.org/set-in-cpp-stl/

http://www.cplusplus.com/reference/set/set/
